primary-expression:
identifier
constant
string-literal
######( expression )


postfix-expression:
primary-expression
postfix-expression [ expression ]
postfix-expression ( argument-expression-list )
postfix-expression ( )
postfix-expression ++
postfix-expression --
#######( type-name ) { initializer-list }
#######( type-name ) { initializer-list , }


argument-expression-list:
assignment-expression
argument-expression-list , assignment-expression


multiplicative-expression:
postfix-expression
multiplicative-expression * postfix-expression
multiplicative-expression / postfix-expression

additive-expression:
multiplicative-expression
additive-expression + multiplicative-expression
additive-expression - multiplicative-expression


relational-expression:
additive-expression
relational-expression < additive-expression
relational-expression > additive-expression
relational-expression <= additive-expression
relational-expression >= additive-expression

equality-expression:
relational-expression
equality-expression == relational-expression
equality-expression != relational-expression


assignment-expression:
postfix-expression assignment-operator assignment-expression

assignment-operator:
=

expression:
assignment-expression
expression , assignment-expression


declaration:
declaration-specifiers init-declarator-list ;

declaration-specifiers:
int
















